// @ts-check

import eslint from '@eslint/js';
import pluginVitest from '@vitest/eslint-plugin';
import { defineConfigWithVueTs, vueTsConfigs } from '@vue/eslint-config-typescript';
import pluginVue from 'eslint-plugin-vue';

export default defineConfigWithVueTs(
  {
    ...pluginVitest.configs.recommended,
    files: ['**/__tests__/*'],
  },
  {
    name: 'app/files-to-lint',
    files: ['{packages,apps}/**/*.{js,ts,mts,tsx,vue}'],
    languageOptions: {
      parserOptions: {
        project: [
          './packages/*/tsconfig.json',
          './apps/*/tsconfig.json',
        ],
        tsconfigRootDir: import.meta.dirname,
        ecmaVersion: 'latest',
        sourceType: 'module',
      },
    },
    ignores: ['eslint.config.js'],
  },
  eslint.configs.recommended,
  pluginVue.configs['flat/recommended'],
  vueTsConfigs.recommendedTypeChecked,
  {
    rules: {
      'vue/multi-word-component-names': 0,
      '@typescript-eslint/no-empty-object-type': 0,
      '@typescript-eslint/no-explicit-any': 0,
      '@typescript-eslint/no-unsafe-argument': 0,
      '@typescript-eslint/no-unsafe-member-access': 0,
      '@typescript-eslint/no-unsafe-assignment': 0,
      '@typescript-eslint/no-unsafe-return': 0,
      '@typescript-eslint/no-redundant-type-constituents': 0,
      '@typescript-eslint/no-duplicate-type-constituents': 0,
      '@typescript-eslint/no-unused-expressions': 0,
      '@typescript-eslint/no-unsafe-call': 0,
      '@typescript-eslint/no-namespace': 0,
      '@typescript-eslint/no-misused-promises': 0,
      'array-bracket-newline': ['error', 'consistent'],
      'array-bracket-spacing': ['error', 'never'],
      'array-element-newline': ['error', 'consistent'],
      'arrow-parens': ['error', 'as-needed'],
      'arrow-spacing': ['error', { before: true, after: true }],
      'block-spacing': ['error', 'always'],
      'brace-style': ['error', '1tbs', { allowSingleLine: false }],
      'comma-dangle': ['error', 'always-multiline'],
      'comma-spacing': ['error', { before: false, after: true }],
      'comma-style': ['error', 'last'],
      'computed-property-spacing': ['error', 'never'],
      'curly-newline': ['error', 'always'],
      'dot-location': ['error', 'property'],
      'eol-last': ['error', 'always'],
      'function-call-argument-newline': ['error', 'consistent'],
      'function-call-spacing': ['error', 'never'],
      'function-paren-newline': ['error', 'consistent'],
      'generator-star-spacing': ['error', { before: false, after: true }],
      'implicit-arrow-linebreak': ['error', 'beside'],
      'indent': ['error', 2],
      'indent-binary-ops': ['error', 2],
      'key-spacing': ['error', { beforeColon: false, afterColon: true, mode: 'strict' }],
      'keyword-spacing': ['error', { before: true, after: true }],
      'line-comment-position': ['error', { position: 'above' }],
      'linebreak-style': ['error', 'unix'],
      'lines-around-comment': ['error', {}],
      'lines-between-class-members': ["error", "always", { "exceptAfterOverload": true }],
      'max-len': ['warn', {
        code: 100,
        tabWidth: 2,
        ignoreComments: true,
      }],
      'max-statements-per-line': ['error', { max: 1 }],
      'member-delimiter-style': ['error', {
        multiline: {
          delimiter: 'semi',
          requireLast: true
        },
        singleline: {
          delimiter: 'semi',
          requireLast: false
        },
        multilineDetection: 'brackets'
      }],
      'multiline-comment-style': ["error", "separate-lines", { "checkJSDoc": true }],
      'multiline-ternary': ['error', 'always-multiline'],
      'new-parens': ['error', 'always'],
      'newline-per-chained-call': ['error', { ignoreChainWithDepth: 2 }],
      'no-confusing-arrow': 'error',
      'no-extra-parens': ['error', 'all'],
      'no-extra-semi': 'error',
      'no-floating-decimal': 'error',
      'no-mixed-operators': 'error',
      'no-mixed-spaces-and-tabs': 'error',
      'no-multi-spaces': 'error',
      'no-multiple-empty-lines': ['error', { max: 1, maxEOF: 1, maxBOF: 0 }],
      'no-tabs': 'error',
      'no-trailing-spaces': 'error',
      'no-whitespace-before-property': 'error',
      'nonblock-statement-body-position': ['error', 'beside'],
      'object-curly-newline': ['error', {
        multiline: true,
        consistent: true,
      }],
      'object-curly-spacing': ['error', 'always', {
        arraysInObjects: false,
      }],
      'object-property-newline': ['error', { allowAllPropertiesOnSameLine: true }],
      'one-var-declaration-per-line': ['error', 'always'],
      'operator-linebreak': ['error', 'before'],
      'padded-blocks': ['error', 'never'],
      'padding-line-between-statements': [
        'error',
        { blankLine: "always", prev: "directive", next: "*" },
        { blankLine: "any", prev: "directive", next: "directive" },
        { blankLine: "never", prev: ["case", "default"], next: "*" }
      ],
      'quote-props': ['error', 'as-needed'],
      'quotes': ['error', 'single', { avoidEscape: true }],
      'rest-spread-spacing': ['error', 'never'],
      'semi': ['error', 'always'],
      'semi-spacing': ['error', { before: false, after: true }],
      'semi-style': ['error', 'last'],
      'space-before-blocks': ['error', 'always'],
      'space-before-function-paren': ['error', {
        anonymous: 'never',
        named: 'never',
        asyncArrow: 'always',
        catch: 'always',
      }],
      'space-in-parens': ['error', 'never'],
      'space-infix-ops': 'error',
      'space-unary-ops': ['error', { "words": true, "nonwords": false }],
      'spaced-comment': ['error', 'always'],
      'switch-colon-spacing': ['error', { before: false, after: true }],
      'template-curly-spacing': ['error', 'never'],
      'template-tag-spacing': ['error', 'never'],
      'type-annotation-spacing': ['error', { before: false, after: true }],
      'type-generic-spacing': ['error', 'never'],
      'type-named-tuple-spacing': ['error'],
      'wrap-iife': ['error', 'inside'],
      'yield-star-spacing': ['error', { before: false, after: true }],
      'no-empty': 'off',
    },
  },
)
